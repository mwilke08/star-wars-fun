{"version":3,"sources":["App.js","serviceWorker.js","Components/Options.js","index.js"],"names":["App","state","field","randomFact","allFacts","React","Component","Boolean","window","location","hostname","match","Options","props","handleChange","event","setState","target","value","getRandomFact","length","rand","Math","floor","random","newURL","this","fetch","then","response","json","data","results","allNames","map","push","name","id","onChange","onClick","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OAuBeA,G,wDAlBd,aAAc,IAAD,8BACZ,gBACKC,MAAQ,CACZC,MAAO,GACPC,WAAY,GACZC,SAAU,IALC,E,qDAUZ,OACC,6BACC,uD,GAdcC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBN,IA+DeC,E,kDA3Dd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAQPC,aAAe,SAACC,GACf,EAAKC,SAAS,CAACd,MAAOa,EAAME,OAAOC,SAVlB,EAalBC,cAAgB,WACf,IAAIC,EAAS,EAAKnB,MAAMG,SAASgB,OAE3BC,EAAOC,KAAKC,MAAMD,KAAKE,UAAUJ,EAD3B,EACsC,IAClD,EAAKJ,SAAS,CAACb,WAAY,EAAKF,MAAMG,SAASiB,MAf/C,EAAKpB,MAAQ,CACZC,MAAO,UACPC,WAAY,GACZC,SAAU,IALM,E,+DAoBCS,GAAO,IAAD,OAClBY,EAzBQ,8BAyBWC,KAAKzB,MAAMC,MACpCyB,MAAMF,GACLG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,IAAMC,EAAUD,EAAKC,QACjBC,EAAS,GACbD,EAAQE,IAAIH,EAAO,SAACA,GACnBE,EAASE,KAAKJ,EAAKK,QAEpB,EAAKpB,SAAS,CAACZ,SAAU6B,S,+BAK1B,OACC,6BACC,iCACA,2BAAOI,GAAG,eAAV,eACC,4BAAQC,SAAUZ,KAAKZ,aAAcsB,KAAK,OAAOC,GAAG,QACnD,4BAAQnB,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,aAED,4BAAQqB,QAASb,KAAKP,eAAtB,cAAiDO,KAAKzB,MAAMC,QAG7D,iCACC,2BACEwB,KAAKzB,MAAME,kB,GApDIE,IAAMC,WCI5BkC,IAASC,OACP,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9cfc7b80.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tfield: '',\n\t\t\trandomFact: [],\n\t\t\tallFacts: ''\n\t\t}\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Star Wars API Test</h1>\n\t\t\t</div>\n  \t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nconst URLhost = 'https://swapi.py4e.com/api/'\n\nclass Options extends React.Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfield: 'planets',\n\t\t\trandomFact: [],\n\t\t\tallFacts: ''\n\t\t}\n\t}\n\n\thandleChange = (event) =>{\n\t\tthis.setState({field: event.target.value});\n\t}\n\n\tgetRandomFact = () =>{\n\t\tlet length = this.state.allFacts.length;\n\t\tconst min = 1;\n\t\tconst rand = Math.floor(Math.random()*(length-min+1));\n\t\tthis.setState({randomFact: this.state.allFacts[rand]});\n\t}\n\n\tcomponentDidUpdate(props){\n\t\tconst newURL = URLhost + this.state.field;\n\t\tfetch(newURL)\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tconst results = data.results;\n\t\t\tlet allNames=[];\n\t\t\tresults.map(data = (data) =>{\n\t\t\t\tallNames.push(data.name);\n\t\t\t})\n\t\t\tthis.setState({allFacts: allNames});\n\t\t})\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<section>\n\t\t\t\t<label id='optionLabel'>Select One:</label>\n\t\t\t\t\t<select onChange={this.handleChange} name='type' id='type'>\n\t\t\t\t\t\t<option value='planets'>Planets</option>\n\t\t\t\t\t\t<option value='people'>People</option>\n\t\t\t\t\t\t<option value='species'>Species</option>\n\t\t\t\t\t\t<option value='vehicles'>Vehicles</option>\n\t\t\t\t\t</select>\n\t\t\t\t\t<button onClick={this.getRandomFact}>Get Random {this.state.field}</button>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{this.state.randomFact}\n\t\t\t\t\t</p>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default Options;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Options from './Components/Options';\n\nReactDOM.render(\n  <>\n    <App />\n    <Options />\n  </>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}